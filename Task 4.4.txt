-- 4.4: Database Querying in SQL

-- Explain the importance of querying in SQL
-- Identify SQL syntax for ordering, limiting, and grouping data
-- Explain the basics of database migration and ETL
-- Write SQL queries to organize and sort data


-- Write a SQL query that will tell you how long it will take to select the film table from the Rockbuster Database

EXPLAIN
SELECT *
FROM film

-- Write a SQL statment that will list the titles in the database in reverse alphabetical order

SELECT title,
       release_year
FROM film
ORDER BY title DESC

-- Write the same SQL query, but limit results to just the first 10 answers

SELECT title,
       release_year
FROM film
ORDER BY title DESC
LIMIT 10

-- Write a SQL query that groups together all ratings in database

SELECT rating
FROM film
GROUP BY rating

-- Write a SQL query that counts the number of each rating in the database. Sort by highest to lowest

SELECT rating,
       COUNT(film_id)
FROM film
GROUP BY rating
ORDER BY COUNT(film_id) DESC

-- Write a SQL query that gives you the average rental duration for each rating

SELECT rating, AVG(rental_duration)
FROM film
GROUP BY rating

-- Write a SQL query that sorts the number of titles by both rating and rental rate

SELECT rating,
       rental_rate,
       COUNT(film_id)
FROM film
GROUP BY rating,
         rental_rate 

-- Write a SQL query to get the unique ratings and release years from the “film” table using the DISCTINCT statement

SELECT DISTINCT rating,
                release_year
FROM film

--Refining Your Query: You need to get some data from the “film” table and decide to use the query SELECT * FROM film.
--You realize that only the “film_id” and “title” columns are needed. Write a new query that selects only those 2 columns.

SELECT  film_id, title
FROM film

-- What is the cost of this query?

"Seq Scan on film  (cost=0.00..64.00 rows=1000 width=19)"

-- run a query that selects every film from the “film” table, their release year, and with the movies sorted by highest to lowest rental rate.

SELECT title, release_year, rental_rate
FROM film
GROUP BY title, release_year, rental_rate
ORDER BY rental_rate DESC

-- What is the average rental rate for each rating category?

SELECT rating, AVG(rental_rate)
FROM film
GROUP BY rating

OUTPUT
"R"	2.94
"NC-17"	2.97
"G"	2.90
"PG"	3.05
"PG-13"	3.03

-- What are the minimum and maximum rental durations for each rating category?

SELECT rating, MIN(rental_duration), MAX(rental_duration)
FROM film
GROUP BY rating

OUTPUT
"R"	3	7
"NC-17"	3	7
"G"	3	7
"PG"	3	7
"PG-13"	3	7
